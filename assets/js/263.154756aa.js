(window.webpackJsonp=window.webpackJsonp||[]).push([[263],{470:function(t,a,e){"use strict";e.r(a);var l=e(5),o=Object(l.a)({},(function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"collections-kotlin"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#collections-kotlin"}},[t._v("#")]),t._v(" collections|kotlin")]),t._v(" "),e("h2",{attrs:{id:"map"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#map"}},[t._v("#")]),t._v(" Map")]),t._v(" "),e("p",[t._v("最基础的创建map的方法是使用"),e("code",[t._v('mapof("key1" to value1, "key2" to value2)')]),t._v(" ,使用这种方法创建的】map是不可变的，即只能在创建的时候赋值，那么想要可变的map该如何做呢。"),e("br"),t._v("\n在kotlin中，使用"),e("code",[t._v("mutableMapOf")]),t._v("方法来实现。")]),t._v(" "),e("p",[t._v("mutalbleMapOf的默认实现方式是 linkedMap, 他会保存添加元素的顺序，遍历的时候也是按照头节点到尾节点的顺序来的。")]),t._v(" "),e("p",[t._v("当然还可以如果插入顺序没有那么高的要求的话，可以使用HashMap，每个元素的位置是随机的，优点 是索引key的速度很快。")])])}),[],!1,null,null,null);a.default=o.exports}}]);