(window.webpackJsonp=window.webpackJsonp||[]).push([[206],{403:function(n,t,e){"use strict";e.r(t);var a=e(5),r=Object(a.a)({},(function(){var n=this,t=n.$createElement,e=n._self._c||t;return e("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[e("h1",{attrs:{id:"java多线程"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#java多线程"}},[n._v("#")]),n._v(" java多线程")]),n._v(" "),e("h2",{attrs:{id:"创建线程的方法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#创建线程的方法"}},[n._v("#")]),n._v(" 创建线程的方法")]),n._v(" "),e("p",[n._v("继承Thead类，并实现run方法,继承thread类的类，在创建多线程的时候不会共享类变量，会创建一个副本变量。实现runnable则不同，多线程之间会共用类变量。")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('public class CreateThread {\n    public static void main(String[] args) {\n        Thread t = new ThreadOne();\n        t.start();\n        try {\n            // 等待线程t中的run方法执行完毕，再回到main中执行下面的语句\n            t.join();\n        } catch (InterruptedException e) {\n            throw new RuntimeException(e);\n        }\n        System.out.println("end");\n    }\n}\n\nclass ThreadOne extends Thread {\n    @Override\n    public void run() {\n        System.out.println("threadOne");\n    }\n}\n/*\n运行结果如下：  \nthreadOne\nend\n*/\n')])])])])}),[],!1,null,null,null);t.default=r.exports}}]);