(window.webpackJsonp=window.webpackJsonp||[]).push([[168],{367:function(e,r,o){"use strict";o.r(r);var c=o(5),v=Object(c.a)({},(function(){var e=this,r=e.$createElement,o=e._self._c||r;return o("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[o("h1",{attrs:{id:"docker常见命令"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#docker常见命令"}},[e._v("#")]),e._v(" docker常见命令")]),e._v(" "),o("p",[e._v("启动        "),o("code",[e._v("systemctl start docker")]),o("br"),e._v("\n守护进程重启   "),o("code",[e._v("sudo systemctl daemon-reload")]),o("br"),e._v("\n重启docker服务   "),o("code",[e._v("systemctl restart docker")]),o("br"),e._v("\n重启docker服务  "),o("code",[e._v("sudo service docker restart")]),o("br"),e._v("\n关闭docker   "),o("code",[e._v("service docker stop")]),o("br"),e._v("\n关闭docker  "),o("code",[e._v("systemctl stop docker")])]),e._v(" "),o("p",[e._v("容器启动、停止")]),e._v(" "),o("p",[o("code",[e._v("docker ps -a")]),e._v("　查看本地所有运行的容器"),o("br"),e._v(" "),o("code",[e._v("docker ps")]),e._v("        产看正在运行的容器"),o("br"),e._v(" "),o("code",[e._v("docker start")]),e._v(" 容器id 运行容器"),o("br"),e._v(" "),o("code",[e._v("docker images")]),e._v(" 查看现有镜像"),o("br"),e._v("\nREPOSITORY：“镜像所属的仓库名”，在仓库下会有很多版本的镜像，也就是一个仓库会包含多个镜像，而这里显示表示的是不同镜像属于那些仓库"),o("br"),e._v("\nTAG：“镜像的标签名”，在仓库中，不同的镜像是以标签的形式来区分的。一个REPOSITORY仓库名+TAG标签名，就构成了一个完整的镜像名，如：centos:7.02、ubuntu:14.04、debian:latest这个镜像名就会对应一个镜像的ID。我们之前在运行镜像时，通常只是指定了centos，并没有指定后面的TAG标签名，在这种情况下，docker会默认使用“latest”标签所对应的镜像。"),o("br"),e._v("\nIMAGE ID：“镜像的唯一ID”，常常可以使用这个来打开指定的镜像，因为TAG是可以重复的，但是ID是唯一的"),o("br"),e._v("\nCREATED：“镜像建立的时间”。"),o("br"),e._v("\nSIZE：“镜像建立的大小”。"),o("br"),e._v(" "),o("code",[e._v("docker rmi name:TAG")]),e._v(" 通过标签删除容器\n"),o("code",[e._v("docker rm")]),e._v(" 容器id    移出容器")]),e._v(" "),o("p",[o("code",[e._v("docker ps")]),e._v(" // 查看所有正在运行容器"),o("br"),e._v(" "),o("code",[e._v("$ docker stop containerId")]),e._v("// containerId 是容器的ID")]),e._v(" "),o("p",[o("code",[e._v("$ docker ps -a")]),e._v(" // 查看所有容器"),o("br"),e._v(" "),o("code",[e._v("$ docker ps -a -q")]),e._v(" // 查看所有容器ID")]),e._v(" "),o("p",[o("code",[e._v("$ docker stop $(docker ps -a -q)")]),e._v(" //  stop停止所有容器"),o("br"),e._v(" "),o("code",[e._v("$ docker rm $(docker ps -a -q)")]),e._v(" //   remove删除所有容器")])])}),[],!1,null,null,null);r.default=v.exports}}]);