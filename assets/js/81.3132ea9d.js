(window.webpackJsonp=window.webpackJsonp||[]).push([[81],{290:function(t,a,v){"use strict";v.r(a);var _=v(5),s=Object(_.a)({},(function(){var t=this,a=t.$createElement,v=t._self._c||a;return v("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[v("h1",{attrs:{id:"数据库面试题"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#数据库面试题"}},[t._v("#")]),t._v(" 数据库面试题")]),t._v(" "),v("blockquote",[v("p"),v("div",{staticClass:"table-of-contents"},[v("ul",[v("li",[v("a",{attrs:{href:"#mysql索引"}},[t._v("MySQL索引")]),v("ul",[v("li",[v("a",{attrs:{href:"#何为索引-作用"}},[t._v("何为索引？作用？")])])])]),v("li",[v("a",{attrs:{href:"#索引的底层数据结构"}},[t._v("索引的底层数据结构")]),v("ul",[v("li",[v("a",{attrs:{href:"#hash表"}},[t._v("Hash表")])]),v("li",[v("a",{attrs:{href:"#b树和b-树"}},[t._v("B树和B+树")])])])]),v("li",[v("a",{attrs:{href:"#过程存储"}},[t._v("过程存储")])]),v("li",[v("a",{attrs:{href:"#数据库三大范式"}},[t._v("数据库三大范式")])]),v("li",[v("a",{attrs:{href:"#什么是索引"}},[t._v("什么是索引")])]),v("li",[v("a",{attrs:{href:"#索引优缺点"}},[t._v("索引优缺点")])]),v("li",[v("a",{attrs:{href:"#数据库事务是什么"}},[t._v("数据库事务是什么")])]),v("li",[v("a",{attrs:{href:"#sql优化"}},[t._v("SQL优化")])]),v("li",[v("a",{attrs:{href:"#什么是内连接、左外连接、右连接"}},[t._v("什么是内连接、左外连接、右连接？")])]),v("li",[v("a",{attrs:{href:"#like声明中-和-是什么意思"}},[t._v("LIKE声明中%和_是什么意思？")])]),v("li",[v("a",{attrs:{href:"#如何显示前50行"}},[t._v("如何显示前50行")])]),v("li",[v("a",{attrs:{href:"#索引的底层实现原理和优化"}},[t._v("索引的底层实现原理和优化")])]),v("li",[v("a",{attrs:{href:"#mysql日志及分类"}},[t._v("MySQL日志及分类")])]),v("li",[v("a",{attrs:{href:"#varchar和char的区别"}},[t._v("varchar和char的区别？")])]),v("li",[v("a",{attrs:{href:"#union和union-all的区别"}},[t._v("UNION和UNION ALL的区别？")])]),v("li",[v("a",{attrs:{href:"#drop、delete、truncate区别"}},[t._v("drop、delete、truncate区别")])]),v("li",[v("a",{attrs:{href:"#dml-ddl"}},[t._v("DML&DDL")])]),v("li",[v("a",{attrs:{href:"#数据库设计步骤"}},[t._v("数据库设计步骤")])]),v("li",[v("a",{attrs:{href:"#字符集"}},[t._v("字符集")])]),v("li",[v("a",{attrs:{href:"#存储引擎"}},[t._v("存储引擎")]),v("ul",[v("li",[v("a",{attrs:{href:"#myisam和innodb区别"}},[t._v("MyISAM和InnoDB区别")])])])]),v("li",[v("a",{attrs:{href:"#并发事务带来的问题"}},[t._v("并发事务带来的问题")])]),v("li",[v("a",{attrs:{href:"#不可重复读和幻读的区别"}},[t._v("不可重复读和幻读的区别")])]),v("li",[v("a",{attrs:{href:"#事务的隔离级别"}},[t._v("事务的隔离级别")])]),v("li",[v("a",{attrs:{href:"#mysql中默认的隔离级别"}},[t._v("mysql中默认的隔离级别")])])])]),v("p")]),t._v(" "),v("h2",{attrs:{id:"mysql索引"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#mysql索引"}},[t._v("#")]),t._v(" MySQL索引")]),t._v(" "),v("h3",{attrs:{id:"何为索引-作用"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#何为索引-作用"}},[t._v("#")]),t._v(" 何为索引？作用？")]),t._v(" "),v("p",[t._v("索引是一种用于快速查询和检索数据的数据结构。常见的索引结构有B树，B+树和Hash。")]),t._v(" "),v("h2",{attrs:{id:"索引的底层数据结构"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#索引的底层数据结构"}},[t._v("#")]),t._v(" 索引的底层数据结构")]),t._v(" "),v("h3",{attrs:{id:"hash表"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#hash表"}},[t._v("#")]),t._v(" Hash表")]),t._v(" "),v("p",[t._v("哈希表是键值对的集合，通过键可以快速取出对应的值，因此哈希表的时间复杂度是O(1)。")]),t._v(" "),v("p",[t._v("通过"),v("strong",[t._v("哈希算法")]),t._v("，可以快速根据键计算出index。")]),t._v(" "),v("p",[v("strong",[t._v("hash冲突")]),t._v(" 一般使用链地址法，jdk8以后加入了红黑树。")]),t._v(" "),v("p",[v("strong",[t._v("为何MySQL没有使用hash作为索引的数据结构？")]),v("br"),t._v("\n1.hash冲突 2.不支持顺序和范围查询：想要对数据进行排序或进行范围查找就不行了。")]),t._v(" "),v("h3",{attrs:{id:"b树和b-树"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#b树和b-树"}},[t._v("#")]),t._v(" B树和B+树")]),t._v(" "),v("p",[t._v("B树，全称是多路平衡查找树。")]),t._v(" "),v("p",[v("strong",[t._v("二者的异同？")]),v("br"),t._v("\nB树所有结点既可以存放键也可存放数据。B+树只能再叶子结点存放key和data，其他结点存放key。"),v("br"),t._v("\nB树的叶子结点都是独立的，B+树则是所有叶子结点链接起来组成一个链表")]),t._v(" "),v("h2",{attrs:{id:"过程存储"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#过程存储"}},[t._v("#")]),t._v(" 过程存储")]),t._v(" "),v("p",[t._v("存储过程就是完成特定功能的SQL语句集，经编译创建保存到数据库中，用户通过指定的过程的名称并给定参数来调用执行。即SQL语句的封装和重用。")]),t._v(" "),v("p",[v("strong",[t._v("优点")]),t._v("是存储过程可封装，隐藏商业逻辑。"),v("br"),t._v("\n存储过程可以传值，可接受参数。")]),t._v(" "),v("p",[v("strong",[t._v("缺点:")]),t._v(" 移植性差故不推荐使用。")]),t._v(" "),v("div",{staticClass:"language-java extra-class"},[v("pre",{pre:!0,attrs:{class:"language-java"}},[v("code",[t._v("mysql"),v("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" delimiter $$　　#将语句的结束符号从分号"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("临时改为两个$$"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("可以是自定义"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nmysql"),v("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" CREATE "),v("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("PROCEDURE")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token function"}},[t._v("delete_matches")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("IN p_playerno INTEGER"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),v("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v(" BEGIN\n    "),v("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v(" 　　DELETE FROM MATCHES\n    "),v("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("    "),v("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("WHERE")]),t._v(" playerno "),v("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" p_playerno"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),v("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v(" END$$\n"),v("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Query")]),t._v(" OK"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" rows affected "),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),v("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.01")]),t._v(" sec"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n \nmysql"),v("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" delimiter"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("　　#将语句的结束符号恢复为分号\n")])])]),v("h2",{attrs:{id:"数据库三大范式"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#数据库三大范式"}},[t._v("#")]),t._v(" 数据库三大范式")]),t._v(" "),v("details",[v("summary",[t._v("查看答案")]),v("p",[t._v("第一范式：列不可再分")]),t._v(" "),v("p",[t._v("第二范式： 不存在非主属性部分依赖于候选码")]),t._v(" "),v("p",[t._v("第三范式： 不存在传递依赖")]),t._v(" "),v("p",[t._v("三大范式是一级一级依赖的，高级范式建立在低一级范式之上。")])]),v("h2",{attrs:{id:"什么是索引"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#什么是索引"}},[t._v("#")]),t._v(" 什么是索引")]),t._v(" "),v("details",[v("summary",[t._v("查看答案")]),v("p",[t._v("索引是对数据库表的一列或者多列的值进行排序的一种结构，使用索引可以快速访问数据表中的特定信息。")])]),v("h2",{attrs:{id:"索引优缺点"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#索引优缺点"}},[t._v("#")]),t._v(" 索引优缺点")]),t._v(" "),v("details",[v("summary",[t._v("查看答案")]),v("p",[t._v("优点：1.大大加快数据检索的速度2.加速表与表之间的连接\n缺点：1.建立索引需要占用物理空间2.对数据进行增删的时候要重新维护索引")])]),v("h2",{attrs:{id:"数据库事务是什么"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#数据库事务是什么"}},[t._v("#")]),t._v(" 数据库事务是什么")]),t._v(" "),v("details",[v("summary",[t._v("查看答案")]),v("p",[t._v("事务是作为单个逻辑工作单元执行的一系列操作，这些操作作为一个整体进行提交，要么都执行要么都不执行。")]),t._v(" "),v("p",[v("strong",[t._v("原子性")]),t._v("：一个事务（transaction）中的所有操作，要么全部完成，要么全部不完成，不会结束在中间某个环节。事务在执行过程中发生错误，会被回滚（Rollback）到事务开始前的状态，就像这个事务从来没有执行过一样。")]),t._v(" "),v("p",[v("strong",[t._v("一致性")]),t._v("：在事务开始之前和事务结束以后，数据库的完整性没有被破坏。这表示写入的资料必须完全符合所有的预设规则，这包含资料的精确度、串联性以及后续数据库可以自发性地完成预定的工作。")]),t._v(" "),v("p",[v("strong",[t._v("隔离性")]),t._v("：数据库允许多个并发事务同时对其数据进行读写和修改的能力，隔离性可以防止多个事务并发执行时由于交叉执行而导致数据的不一致。事务隔离分为不同级别，包括读未提交（Read uncommitted）、读提交（read committed）、可重复读（repeatable read）和串行化（Serializable）。")]),t._v(" "),v("p",[v("strong",[t._v("持久性")]),t._v("：事务处理结束后，对数据的修改就是永久的，即便系统故障也不会丢失。")])]),v("h2",{attrs:{id:"sql优化"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#sql优化"}},[t._v("#")]),t._v(" SQL优化")]),t._v(" "),v("details",[v("summary",[t._v("查看答案")]),v("ol",[v("li",[t._v("查询语句中不要使用select*")]),t._v(" "),v("li",[t._v("减少子查询，使用关联查询代替(left jion,right jion,inner jion)")]),t._v(" "),v("li",[t._v("减少使用IN或NOT IN，使用exists，not exists活着关联语句代替")]),t._v(" "),v("li",[t._v("or的查询尽量使用union或union all代替")])])]),v("h2",{attrs:{id:"什么是内连接、左外连接、右连接"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#什么是内连接、左外连接、右连接"}},[t._v("#")]),t._v(" 什么是内连接、左外连接、右连接？")]),t._v(" "),v("details",[v("summary",[t._v("查看答案")]),v("p",[t._v("你可以在 SELECT, UPDATE 和 DELETE 语句中使用 Mysql 的 JOIN 来联合多表查询。")]),t._v(" "),v("p",[t._v("JOIN 按照功能大致分为如下三类：")]),t._v(" "),v("p",[t._v("INNER JOIN（内连接,或等值连接）：获取两个表中字段匹配关系的记录。\nLEFT JOIN（左连接）：获取左表所有记录，即使右表没有对应匹配的记录。\nRIGHT JOIN（右连接）： 与 LEFT JOIN 相反，用于获取右表所有记录，即使左表没有对应匹配的记录。")])]),v("h2",{attrs:{id:"like声明中-和-是什么意思"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#like声明中-和-是什么意思"}},[t._v("#")]),t._v(" LIKE声明中%和_是什么意思？")]),t._v(" "),v("details",[v("summary",[t._v("查看答案")]),v("p",[t._v("%：表示任意 0 个或多个字符。可匹配任意类型和长度的字符，有些情况下若是中文，请使用两个百分号（%%）表示。\n_：表示任意单个字符。匹配单个任意字符，它常用来限制表达式的字符长度语句。")])]),v("h2",{attrs:{id:"如何显示前50行"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#如何显示前50行"}},[t._v("#")]),t._v(" 如何显示前50行")]),t._v(" "),v("details",[v("summary",[t._v("查看答案")]),v("p",[v("code",[t._v("SELECT * FROM <table name> LIMIT 0,50;")])])]),v("h2",{attrs:{id:"索引的底层实现原理和优化"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#索引的底层实现原理和优化"}},[t._v("#")]),t._v(" 索引的底层实现原理和优化")]),t._v(" "),v("p",[t._v("B+树，优化的B+树\n主要是在所有的叶子节点中增加了指向下一个叶子节点的指针，因此InnoDB建议为大部分表使用默认自增的主键作为主索引。")]),t._v(" "),v("h2",{attrs:{id:"mysql日志及分类"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#mysql日志及分类"}},[t._v("#")]),t._v(" MySQL日志及分类")]),t._v(" "),v("details",[v("summary",[t._v("查看答案")]),v("p",[t._v("日志记录着数据库运行过程中的各种状态信息。")]),t._v(" "),v("p",[t._v("主要包括了错误日志、查询日志、慢查询日志、二进制日志、事务日志几大类。")])]),v("h2",{attrs:{id:"varchar和char的区别"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#varchar和char的区别"}},[t._v("#")]),t._v(" varchar和char的区别？")]),t._v(" "),v("p",[t._v("varchar变长，存储速度慢")]),t._v(" "),v("p",[t._v("char定长，存储速度更快")]),t._v(" "),v("h2",{attrs:{id:"union和union-all的区别"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#union和union-all的区别"}},[t._v("#")]),t._v(" UNION和UNION ALL的区别？")]),t._v(" "),v("p",[t._v("union会去重排序")]),t._v(" "),v("p",[t._v("union all不去重也不排序\nunion all性能更好")]),t._v(" "),v("h2",{attrs:{id:"drop、delete、truncate区别"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#drop、delete、truncate区别"}},[t._v("#")]),t._v(" drop、delete、truncate区别")]),t._v(" "),v("details",[v("summary",[t._v("查看答案")]),v("p",[v("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/frunoob/images/202202221813097.png",alt:"微信图片_20220222181256"}})]),t._v(" "),v("p",[t._v("1、delete 和 truncate 仅仅删除表数据，drop 连表数据和表结构一起删除，打个比方，delete 是单杀，truncate 是团灭，drop 是把电脑摔了。")]),t._v(" "),v("p",[t._v("2、delete 是 DML 语句，操作完以后如果没有不想提交事务还可以回滚，truncate 和 drop 是 DDL 语句，操作完马上生效，不能回滚，打个比方，delete 是发微信说分手，后悔还可以撤回，truncate 和 drop 是直接扇耳光说滚，不能反悔。")]),t._v(" "),v("p",[t._v("3、执行的速度上，drop>truncate>delete，打个比方，drop 是神舟火箭，truncate 是和谐号动车，delete 是自行车。")])]),v("h2",{attrs:{id:"dml-ddl"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#dml-ddl"}},[t._v("#")]),t._v(" DML&DDL")]),t._v(" "),v("p",[t._v("DML(Data Manipulation Language):增删查改，后端开发经常使用。")]),t._v(" "),v("p",[t._v("DDL(Data Define Language):对表定义进行修改的语句，"),v("code",[t._v("DROP")]),t._v(", "),v("code",[t._v("ALTER")]),t._v("等等。")]),t._v(" "),v("h2",{attrs:{id:"数据库设计步骤"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#数据库设计步骤"}},[t._v("#")]),t._v(" 数据库设计步骤")]),t._v(" "),v("p",[t._v("分析用户对数据、性能、功能的要求，设计实体关系模型，将E-R图转化为关系模型，设计出逻辑结构，为数据库选择合适的存储结构和存取路径，最后编程、测试、试运行。")]),t._v(" "),v("ul",[v("li",[t._v("需求分析 : 分析用户的需求，包括数据、功能和性能需求。")]),t._v(" "),v("li",[t._v("概念结构设计 : 主要采用 E-R 模型进行设计，包括画 E-R 图。")]),t._v(" "),v("li",[t._v("逻辑结构设计 : 通过将 E-R 图转换成表，实现从 E-R 模型到关系模型的转换。")]),t._v(" "),v("li",[t._v("物理结构设计 : 主要是为所设计的数据库选择合适的存储结构和存取路径。")]),t._v(" "),v("li",[t._v("数据库实施 : 包括编程、测试和试运行")]),t._v(" "),v("li",[t._v("数据库的运行和维护 : 系统的运行与数据库的日常维护。")])]),t._v(" "),v("h2",{attrs:{id:"字符集"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#字符集"}},[t._v("#")]),t._v(" 字符集")]),t._v(" "),v("p",[t._v("使用utf8存储emoji和复杂文字、繁体字就会出错。\nMySQL中若要存储"),v("code",[t._v("emoji")]),t._v("类型的数据，需要指定数据库的编码为"),v("code",[t._v("utf8mb4")]),t._v("。")]),t._v(" "),v("p",[t._v("常用的字符集有：")]),t._v(" "),v("ul",[v("li",[t._v("ASCLL：128个字符，每个字符是8bit，最高位bit仅作为校验位。")]),t._v(" "),v("li",[t._v("GB2312：适用于汉字，不支持繁体字和生僻字，对于英语仅占用1字节，对非英语占用2字节。")]),t._v(" "),v("li",[t._v("GBK：对GB2312的扩展，支持繁体字和生僻字。")]),t._v(" "),v("li",[t._v("GB18030：加入了少数民族汉字，加入了日韩汉字。")]),t._v(" "),v("li",[t._v("BIG5：台湾地区普遍使用的编码，针对繁体。")]),t._v(" "),v("li",[t._v("UNICODE&UTF-8：避免编码解码过程中出现乱码。UTF8根据不同字符选择不用的字节长度。")])]),t._v(" "),v("h2",{attrs:{id:"存储引擎"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#存储引擎"}},[t._v("#")]),t._v(" 存储引擎")]),t._v(" "),v("table",[v("thead",[v("tr",[v("th",[t._v("Engine")]),t._v(" "),v("th",[t._v("support")]),t._v(" "),v("th",[t._v("Comment")]),t._v(" "),v("th",[t._v("Transactions")]),t._v(" "),v("th",[t._v("XA")]),t._v(" "),v("th",[t._v("savepoints")])])]),t._v(" "),v("tbody",[v("tr",[v("td",[t._v("CSV")]),t._v(" "),v("td",[t._v("YES")]),t._v(" "),v("td",[t._v("存储为CSV文件")]),t._v(" "),v("td",[t._v("NO")]),t._v(" "),v("td",[t._v("NO")]),t._v(" "),v("td",[t._v("NO")])]),t._v(" "),v("tr",[v("td",[t._v("MRG_MyISAM")]),t._v(" "),v("td",[t._v("YES")]),t._v(" "),v("td"),t._v(" "),v("td"),t._v(" "),v("td"),t._v(" "),v("td")]),t._v(" "),v("tr",[v("td",[t._v("MEMORY")]),t._v(" "),v("td",[t._v("YES")]),t._v(" "),v("td",[t._v("基于哈希，存储在内存中，对临时表有用")]),t._v(" "),v("td",[t._v("NO")]),t._v(" "),v("td",[t._v("NO")]),t._v(" "),v("td",[t._v("NO")])]),t._v(" "),v("tr",[v("td",[t._v("Aria")]),t._v(" "),v("td",[t._v("YES")]),t._v(" "),v("td"),t._v(" "),v("td"),t._v(" "),v("td"),t._v(" "),v("td")]),t._v(" "),v("tr",[v("td",[t._v("MyISAM")]),t._v(" "),v("td",[t._v("YES")]),t._v(" "),v("td"),t._v(" "),v("td"),t._v(" "),v("td"),t._v(" "),v("td")]),t._v(" "),v("tr",[v("td",[t._v("SEQUENGE")]),t._v(" "),v("td",[t._v("YES")]),t._v(" "),v("td"),t._v(" "),v("td"),t._v(" "),v("td"),t._v(" "),v("td")]),t._v(" "),v("tr",[v("td",[t._v("InnoDB")]),t._v(" "),v("td",[t._v("YES")]),t._v(" "),v("td"),t._v(" "),v("td"),t._v(" "),v("td"),t._v(" "),v("td")]),t._v(" "),v("tr",[v("td",[t._v("PERFORMANCE_SEHEMA")]),t._v(" "),v("td",[t._v("YES")]),t._v(" "),v("td"),t._v(" "),v("td"),t._v(" "),v("td"),t._v(" "),v("td")]),t._v(" "),v("tr",[v("td",[t._v("CSV")]),t._v(" "),v("td",[t._v("YES")]),t._v(" "),v("td"),t._v(" "),v("td"),t._v(" "),v("td"),t._v(" "),v("td")])])]),t._v(" "),v("h3",{attrs:{id:"myisam和innodb区别"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#myisam和innodb区别"}},[t._v("#")]),t._v(" MyISAM和InnoDB区别")]),t._v(" "),v("ul",[v("li",[t._v("锁：MyISAM不支持行级锁，只支持表级锁。InnoDB默认支持行级锁。")]),t._v(" "),v("li",[t._v("事务：MyISAM不支持，InnoDB支持。")]),t._v(" "),v("li",[v("strong",[t._v("外健：")]),t._v(" MyISAM不支持，InnoDB支持。")]),t._v(" "),v("li",[t._v("数据库崩溃，重启后InnoDB支持恢复到数据库崩溃前的状态，依赖于"),v("code",[t._v("redo log")]),t._v("。")])]),t._v(" "),v("h2",{attrs:{id:"并发事务带来的问题"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#并发事务带来的问题"}},[t._v("#")]),t._v(" 并发事务带来的问题")]),t._v(" "),v("ul",[v("li",[t._v("脏读：读取未提交的数据变更")]),t._v(" "),v("li",[t._v("不可重复读：在两次访问同一个数据过程中，其他事务修改了数据，导致两次访问的数据不一致")]),t._v(" "),v("li",[t._v("丢失修改：并发的两个事务同时获取到同一个相同的数据，后提交的事务将覆盖前者")]),t._v(" "),v("li",[t._v("幻读：在两次访问同一个数据过程中，其他事务插入或删除了数据，导致两次访问到的数据量不一致")])]),t._v(" "),v("h2",{attrs:{id:"不可重复读和幻读的区别"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#不可重复读和幻读的区别"}},[t._v("#")]),t._v(" 不可重复读和幻读的区别")]),t._v(" "),v("p",[t._v("不可重复读重点是其他事务对数据的修改，而幻读是指其他事务对数据的插入和删除。")]),t._v(" "),v("h2",{attrs:{id:"事务的隔离级别"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#事务的隔离级别"}},[t._v("#")]),t._v(" 事务的隔离级别")]),t._v(" "),v("ul",[v("li",[t._v("读取未提交（READ-UNCOMMITTED）")]),t._v(" "),v("li",[t._v("读取已提交（READ-COMMITTED）")]),t._v(" "),v("li",[t._v("可重复读（REPEATABLE-READ）")]),t._v(" "),v("li",[t._v("可串行化（SERIALIZABLE-READ）依次执行事务")])]),t._v(" "),v("h2",{attrs:{id:"mysql中默认的隔离级别"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#mysql中默认的隔离级别"}},[t._v("#")]),t._v(" mysql中默认的隔离级别")]),t._v(" "),v("p",[t._v("可重读。")]),t._v(" "),v("div",{staticClass:"language-shell extra-class"},[v("pre",{pre:!0,attrs:{class:"language-shell"}},[v("code",[t._v("MariaDB "),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("none"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),v("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" @@tx_isolation"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n+-----------------+\n"),v("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" @@tx_isolation  "),v("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("\n+-----------------+\n"),v("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" REPEATABLE-READ "),v("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("\n+-----------------+\n"),v("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" row "),v("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("set")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),v("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.000")]),t._v(" sec"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n")])])])])}),[],!1,null,null,null);a.default=s.exports}}]);