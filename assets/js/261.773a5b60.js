(window.webpackJsonp=window.webpackJsonp||[]).push([[261],{456:function(s,t,i){"use strict";i.r(t);var a=i(5),o=Object(a.a)({},(function(){var s=this,t=s.$createElement,i=s._self._c||t;return i("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[i("h1",{attrs:{id:"android-kotlin-room"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#android-kotlin-room"}},[s._v("#")]),s._v(" android|kotlin|room")]),s._v(" "),i("h2",{attrs:{id:"kotlin-visibility-modifiers-class-members"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#kotlin-visibility-modifiers-class-members"}},[s._v("#")]),s._v(" kotlin,visibility modifiers,class members")]),s._v(" "),i("ul",[i("li",[s._v("private: visible only inside this class")]),s._v(" "),i("li",[s._v("protected: not only this class but also visible in subclasses")]),s._v(" "),i("li",[s._v("internal: visible inside this module")]),s._v(" "),i("li",[s._v("public: all")])]),s._v(" "),i("h2",{attrs:{id:"kotlin-data-class-构造器"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#kotlin-data-class-构造器"}},[s._v("#")]),s._v(" kotlin,data class,构造器")]),s._v(" "),i("p",[s._v("data class,在构造器中声明的变量才会被编译器识别并为其生成一系列方法（get set  toString  equal等等），在block中声明的则没有这些方法,")]),s._v(" "),i("h2",{attrs:{id:"androi-kotlin-类重复"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#androi-kotlin-类重复"}},[s._v("#")]),s._v(" androi,kotlin,类重复")]),s._v(" "),i("div",{staticClass:"language- extra-class"},[i("pre",[i("code",[s._v("// To use Kotlin annotation processing tool (kapt)\n")])])]),i("p",[s._v('//    kapt "androidx.room:room-compiler:$room_version"')]),s._v(" "),i("div",{staticClass:"language- extra-class"},[i("pre",[i("code",[s._v('// To use Kotlin Symbol Processing (KSP)\nksp "androidx.room:room-compiler:$room_version"\n\n\n二选一  留一个就行了 \n')])])]),i("p",[s._v("ksp 和 kapt 留一个就行了")])])}),[],!1,null,null,null);t.default=o.exports}}]);