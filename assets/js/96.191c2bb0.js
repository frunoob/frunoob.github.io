(window.webpackJsonp=window.webpackJsonp||[]).push([[96],{304:function(t,a,s){"use strict";s.r(a);var n=s(4),r=Object(n.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"java基础知识"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#java基础知识"}},[t._v("#")]),t._v(" java基础知识")]),t._v(" "),s("h2",{attrs:{id:"return-break-continue区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#return-break-continue区别"}},[t._v("#")]),t._v(" RETURN\\BREAK\\CONTINUE区别")]),t._v(" "),s("p",[t._v("依次是结束当前方法、结束当前循环体、结束本次循环。")]),t._v(" "),s("div",{staticClass:"custom-block warning"},[s("p",{staticClass:"custom-block-title"},[t._v("注意")]),t._v(" "),s("p",[t._v("return result; 用于结束有返回值的方法")]),t._v(" "),s("p",[t._v("return; 用于结束没有返回值的方法，即返回值为void。")])]),t._v(" "),s("p",[t._v("但是 return；如果没有判断语句包裹，且后面有其他语句的话就会报错；")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("UseOfReturn")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("args"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("print")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"begin"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t\t"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("print")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('" "')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t\t"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("print")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"end"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t\t"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("print")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"ended"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t\t\t"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("print")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"."')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("报错如下：")]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[t._v("UseOfReturn.java:10: 错误: 无法访问的语句\n                        System.out.print"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"ended"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  // 只要删掉这一句代码即可正常编译\n                        ^\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" 个错误\n\n")])])]),s("h2",{attrs:{id:"运算符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#运算符"}},[t._v("#")]),t._v(" 运算符")]),t._v(" "),s("h3",{attrs:{id:"transient-修饰符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#transient-修饰符"}},[t._v("#")]),t._v(" transient 修饰符")]),t._v(" "),s("p",[t._v("序列化的对象包含被 transient 修饰的实例变量时，java 虚拟机(JVM)跳过该特定的变量。\n该修饰符包含在定义变量的语句中，用来预处理类和变量的数据类型。\n实例")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("public transient int limit = 55;   // 不会持久化\npublic int b; // 持久化\n")])])]),s("h3",{attrs:{id:"volatile-修饰符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#volatile-修饰符"}},[t._v("#")]),t._v(" volatile 修饰符")]),t._v(" "),s("p",[t._v("volatile 修饰的成员变量在每次被线程访问时，都强制从共享内存中重新读取该成员变量的值。而且，当成员变量发生变化时，会强制线程将变化值回写到共享内存。这样在任何时刻，两个不同的线程总是看到某个成员变量的同一个值。\n一个 volatile 对象引用可能是 null。")]),t._v(" "),s("h3",{attrs:{id:"位运算符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#位运算符"}},[t._v("#")]),t._v(" 位运算符")]),t._v(" "),s("p",[t._v("& 同1为1，否则为0")]),t._v(" "),s("p",[t._v("｜同0为0，否则为1")]),t._v(" "),s("p",[t._v("^同为0否则为1")]),t._v(" "),s("h3",{attrs:{id:"instranceof运算符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#instranceof运算符"}},[t._v("#")]),t._v(" Instranceof运算符")]),t._v(" "),s("p",[t._v("若左侧对象是右侧借口或类的一个对象则返回true")]),t._v(" "),s("h3",{attrs:{id:"java运算符优先级"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#java运算符优先级"}},[t._v("#")]),t._v(" java运算符优先级")]),t._v(" "),s("p",[t._v("从上到下优先级依次降低")]),t._v(" "),s("p",[t._v("类别\t操作符\t关联性")]),t._v(" "),s("p",[t._v("后缀\t() [] .(点操作符) \t从左到右")]),t._v(" "),s("p",[t._v("一元\texpr++ expr- -\t左-右")]),t._v(" "),s("p",[t._v("一元\t++exp - -expr + - ～ ！\t右 - 左")]),t._v(" "),s("p",[t._v("乘性\t*  / %\t左右")]),t._v(" "),s("p",[t._v("加性\t+ -\t左右")]),t._v(" "),s("p",[t._v("移位\t>> >>> <<\t左右")]),t._v(" "),s("p",[t._v("关系\t> ≤ ≥\t左右")]),t._v(" "),s("p",[t._v("相等\t== !=")]),t._v(" "),s("p",[t._v("按位与或")]),t._v(" "),s("p",[t._v("逻辑与或")]),t._v(" "),s("p",[t._v("条件")]),t._v(" "),s("p",[t._v("赋值")]),t._v(" "),s("p",[t._v("逗号")]),t._v(" "),s("h2",{attrs:{id:"循环"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#循环"}},[t._v("#")]),t._v(" 循环")]),t._v(" "),s("p",[t._v("针对数组的增强for循环")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("for(声明局部变量:数组名或返回数组的方法名){}\n")])])]),s("h2",{attrs:{id:"number-math-类"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#number-math-类"}},[t._v("#")]),t._v(" Number & Math 类")]),t._v(" "),s("p",[t._v("Integer,Float,Short,Long,Double 属于 Number类")]),t._v(" "),s("p",[t._v("Character,Boolean 属于 Object类")]),t._v(" "),s("p",[t._v("Object是一切类的父类")]),t._v(" "),s("p",[t._v("**装箱：**由编译器提供的包装类")]),t._v(" "),s("p",[t._v("Math方法都是静态的，通过Math类可以直接在主函数中直接调用。")]),t._v(" "),s("p",[t._v("Math的floor、ceil、round区别？")]),t._v(" "),s("p",[t._v("floor：返回小于x的最大整数")]),t._v(" "),s("p",[t._v("ceil：返回大于x的最小整数")]),t._v(" "),s("p",[t._v("round：返回小于x+0.5的最大整数")]),t._v(" "),s("h2",{attrs:{id:"string"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#string"}},[t._v("#")]),t._v(" String")]),t._v(" "),s("p",[t._v("创建一个字符串时，先在字符串常量池中查找该字符串是否存在，如果存在就返回其引用，不存在就在公共池中创建一个字符串对象。")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('String s1 = "123";\nString s2 = new String("123")\n')])])]),s("p",[t._v("以上两个语句的区别：前者会 查询常量池中的字符串后者直接在堆内存中新建一个String对象，不会查询常量池了。")]),t._v(" "),s("h3",{attrs:{id:"concat-和-的区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#concat-和-的区别"}},[t._v("#")]),t._v(" concat 和 + 的区别")]),t._v(" "),s("p",[t._v("concat：创建一个能容纳两个字符串的字符数组，getchars方法将字符赋值到新的数组中，最后通过String构造器将数组转换成新的字符串。")]),t._v(" "),s("p",[t._v("+：每次遇到+会创建StringBuilder，他是线程安全的，效率低，不建议。")]),t._v(" "),s("h3",{attrs:{id:"创建格式化字符串"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#创建格式化字符串"}},[t._v("#")]),t._v(" 创建格式化字符串")]),t._v(" "),s("p",[t._v("format：不可复用")]),t._v(" "),s("p",[t._v("printf：可复用")]),t._v(" "),s("h2",{attrs:{id:"数组"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#数组"}},[t._v("#")]),t._v(" 数组")]),t._v(" "),s("p",[t._v("数组a作为参数，传递的是引用，改变该引用a中元素值原数组也会改变。若将a=null，对原数组没有影响。同理，数组a=数组b，就相当于a指向b所指向的地址空间。")]),t._v(" "),s("h2",{attrs:{id:"正则表达式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#正则表达式"}},[t._v("#")]),t._v(" 正则表达式")]),t._v(" "),s("p",[t._v("java.util.regex 包主要包括以下三个类：")]),t._v(" "),s("p",[t._v("Pattern 类：")]),t._v(" "),s("p",[t._v("pattern 对象是一个正则表达式的编译表示。Pattern 类没有公共构造方法。要创建一个 Pattern 对象，你必须首先调用其公共静态编译方法，它返回一个 Pattern 对象。该方法接受一个正则表达式作为它的第一个参数。")]),t._v(" "),s("p",[t._v("Matcher 类：")]),t._v(" "),s("p",[t._v("Matcher 对象是对输入字符串进行解释和匹配操作的引擎。与Pattern 类一样，Matcher 也没有公共构造方法。你需要调用 Pattern 对象的 matcher 方法来获得一个 Matcher 对象。")]),t._v(" "),s("p",[t._v("PatternSyntaxException：")]),t._v(" "),s("p",[t._v("PatternSyntaxException 是一个非强制异常类，它表示一个正则表达式模式中的语法错误。")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('String content = "frunoob";\nString pattern = ".*runoob.*";\nboolean isMatch = Pattern.matches(pattern,content);\n\n\n')])])]),s("h2",{attrs:{id:"字节序"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#字节序"}},[t._v("#")]),t._v(" 字节序")]),t._v(" "),s("p",[t._v("大端和小端")]),t._v(" "),s("p",[t._v("java的字节序是大端，即高位字节放在低位地址上，低位字节放在高位地址上。")])])}),[],!1,null,null,null);a.default=r.exports}}]);